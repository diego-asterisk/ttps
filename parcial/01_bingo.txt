Dado el siguiente código, que deberás guardar en un archivo llamado "my_random.rb" y en uno llamado "moderator.rb", implementá un simulador del juego de azar Bingo. Para esto, deberás utilizar el motor de aleatoriedad provisto en la clase Random e implementar, utilizando clases y/o módulos (según consideres adecuado) la simulación de las tiradas del sorteo de Bingo.

# my_random.rb
class MyRandom
  attr_accessor :maximum, :available, :taken

  def initialize(maximum)
    self.maximum = maximum
    self.available = (0..maximum).to_a
    self.taken = []
  end

  def next
    raise 'Se agotaron los números posibles' if available.empty?
    value = self.available.shuffle!.shift
    self.taken << value
    value
  end
end

# Ejemplo de uso:
#
# r = MyRandom.new(5) # Generador de valores aleatorios entre 0 y 5
# r.next
# #=> 1
# r.next
# #=> 5
# r.next
# #=> 2
# r.next
# #=> 3
# r.next
# #=> 0
# r.next
# #=> 4
# r.next
# #=> RuntimeError: Se agotaron los números posibles

############

# moderator.rb
module Moderator
  def line?(number)
    # Simulación
    @line_queries ||= 0
    @line_queries += 1
    @line_queries > 25 || @line_queries > 8 && rand(0..99) == number
  end
  
  def bingo?(number)
    # Simulación
    @bingo_queries ||= 0
    @bingo_queries += 1
    @bingo_queries > 40 && rand(0..99) == number
  end
end

Deberás utilizar este archivo e implementar el sorteo que consiste en:

    Obtener un nuevo número utilizando MyRandom.
    Imprimirlo en pantalla.
    Si aún no hubo línea, consultar mediante los métodos provistos por Moderator si hay línea. Luego de que se canta línea, con cada nuevo número se consultará si hay bingo utilizando esos mismos métodos.
    Si hay línea, imprimirlo en pantalla y continuar. Si hay bingo, imprimirlo en pantalla y terminar.

Nota 1: En tu solución deberías indicar de qué manera ejecutar el sorteo del bingo.

Nota 2: Deberás controlar que no se produzca ninguna excepción en la ejecución del programa.
